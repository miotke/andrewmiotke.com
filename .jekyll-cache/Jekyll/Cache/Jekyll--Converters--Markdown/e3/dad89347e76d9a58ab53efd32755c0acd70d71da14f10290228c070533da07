I"O<h1 id="day-3">Day 3</h1>

<p>Day three almost didn‚Äôt happen but <em>thankfully</em>(ü§î?) the train was significantly delayed so I was able to finish day 3!</p>

<p>Day 3 coverage:</p>
<ul>
  <li>Arithmetic Operators(<code class="highlighter-rouge">+</code>, <code class="highlighter-rouge">-</code>, <code class="highlighter-rouge">*</code>, <code class="highlighter-rouge">/</code>, <code class="highlighter-rouge">%</code>)</li>
  <li>Operator overloading()</li>
  <li>Compound assignment operators</li>
  <li>Comparison operators(<code class="highlighter-rouge">==</code>, <code class="highlighter-rouge">!=</code>, <code class="highlighter-rouge">&lt;</code>, <code class="highlighter-rouge">&lt;=</code>, <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">&gt;=</code>)</li>
  <li>Conditions</li>
  <li>Combining conditions</li>
  <li>The ternary operator(<code class="highlighter-rouge">let score1 = 12</code>, <code class="highlighter-rouge">let score2 = 100</code> <code class="highlighter-rouge">print(score1 == score2 ? "Scores are the same" : "Scores are not the same")</code>)</li>
  <li>Switch statements</li>
  <li>Range operators <code class="highlighter-rouge">..&lt;</code> <code class="highlighter-rouge">...</code></li>
</ul>

<h1 id="key-take-away">Key Take away</h1>
<p>Ternary Operator</p>

<p>I find the ternary operator super confusing to read at a first glance but, it looks so much nice to have all of the logic in one line of code. My take away today was the ternary operator because it‚Äôs something I want to use more in instances that an if else statement looks extra kludgy.</p>

<pre><code class="language-Swift">let passingTestScore = 70
let testScore = 80

print(testScore &gt;= passingTestScore ? "Test passed!" : "Test failed.")
</code></pre>

<p>Thanks for reading and stay tuned for tomorrow! üëç</p>
:ET